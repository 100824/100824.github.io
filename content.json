{"meta":{"title":"丑丑与大头的博客","subtitle":"","description":"","author":100824,"url":"http://yoursite.com","root":"/"},"pages":[{"title":"所有标签","date":"2020-02-19T18:48:13.000Z","updated":"2020-02-19T19:05:41.162Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-02-19T19:20:26.891Z","updated":"2020-02-19T19:20:26.884Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"浏览器插件","slug":"浏览器插件","date":"2020-03-21T19:05:37.000Z","updated":"2020-03-21T19:51:27.266Z","comments":true,"path":"2020/03/22/浏览器插件/","link":"","permalink":"http://yoursite.com/2020/03/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/","excerpt":"","text":"前言之所以说是浏览器插件而不是Chrome插件是因为我本来想要使用chrome的插件功能，但是之前一直都是在用360极速浏览器，上网查了一下，突然发现原来的浏览器添加插件也是非常方便，加上自己平时习惯了用360，就直接上手360浏览器的插件，知乎简书等文章说google主要优势是快，其实我平时也没啥感觉原来的浏览器会慢。 油猴这个插件真的牛逼，用过才知道，直接在浏览器插件那里搜索tampermonkey，添加后即可使用https://greasyfork.org/zh-CN 这个地址是搜索油猴脚本的网站，免费看视频，百度云盘不限速，各种资源，浏览器快捷翻译等功能都能找到 vimium这个插件可以使你摆脱鼠标的束缚，网页上面的所有链接都可以用键盘打开，只需要按下f键，整个页面的链接就会变成字母，按下对应的字母就能跳转到相应链接（自己试试就知道了）关闭网页/恢复网页 —— x/X搜索 —— o跳转标签页-J/K","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"前端学习路线（小A）","slug":"前端学习路线（小A）","date":"2020-03-21T09:21:19.000Z","updated":"2020-03-21T09:22:34.755Z","comments":true,"path":"2020/03/21/前端学习路线（小A）/","link":"","permalink":"http://yoursite.com/2020/03/21/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88%E5%B0%8FA%EF%BC%89/","excerpt":"","text":"什么是Web前端？Web前端是互联网时代软件产品研发中不可缺少的角色。从广义上来讲，所有用户终端产品与视觉和交互有关的部分，都属于前端工程师的专业领域。 从狭义上讲，Web前端就是使用HTML、CSS、Java等专业技能和工具将产品的UI设计稿实现成网站产品，涵盖用户PC端、移动端等网页，处理视觉和交互问题。 在Web前端这个岗位兴起之前，html+css的工作是被视觉人员所承担的，而js这部分则是由后端完成的。随着智能手机和移动互联网的普及，PC端、手机端、mobile端等五花八门的应用占领着每个人的手机，随之而来各种定制化的UI风格让兼容问题变得越来越头疼。因此，有企业开始把html+css+js这部分工作独立出来，由一个新的岗位来处理，成为了一个处理视觉和交互的综合岗位，这才有了Web前端这个岗位的出现。 因此，Web前端开发行业是伴随Web兴起而细分出来的行业。实际上，Web前端是最接近产品和设计的工程师，起到衔接产品和技术的作用，它存在在互联网的每个角落，我们使用的微信里面的各种功能、小程序等都离不开web前端技术。 Web前端的前景和就业形势、薪酬如何？学习Web前端的就业面很广，选择的岗位有：前端开发工程师、资深前端开发工程师、网站重构工程师、前端架构师等等。 虽然近两年大数据、人工智能等很火，但Web前端开发依然是十分热门的，特别是随着谷歌、YouTube、FireFox等大型企业纷纷将视线转向HTML5，前端开发已经进入HTML5时代，所以，Web前端在今后十年仍有很大的发展空间。 据统计，我国HTML5前端工程师人员的缺口将达到10多万，因此，Web前端工程师是一个非常有“钱”途的职业，并且薪酬会根据技能的深入而有不同程度的增长，其中北京、上海、广州、深圳等地前端工程师的薪资待遇更是一路飙升。 就目前的广州来说，Web前端新手的月薪大概5000元左右；工作经验3年以上、有代表性作品的，月薪在一万元左右；高手级别的月薪两三万元不成问题；大师级别的会更高。 2.大量的行业内技术不精的人造成市场饱和的假象前端入门学习门槛比较低，所以很多人认为HTML、CSS、JavaScript是很简单就掌握的东西，以为在网上看点乱七八糟的教程，随便看看书，用HTML、CSS做个网页布局就可以入门了。如果真是这样，那基本每个人只要花点时间，随便学一下，就可以入行前端了，就可以称为前端开发工程师了，那还得了。 现在很多人就是这样，想着软件开发行业可以拿高薪，想快速入门做开发，这种想法其实没有错。但是只看一点点基础，随便学点东西，只会一点点皮毛就不再深入拓展，这样的技术水平，就算数量再多，市场对专业的前端开发需求依然是只增不减，不会有任何影响的。 大家可以直接去看市场数据： 那么前端开发工程师的未来路在何方？随着前端开发技术发展，移动端应用、小程序、H5游戏出现。前端开发应用场景不断拓展。走向更专业和工程化的发展。 在以后，互联网的大量工作将会需要前端开发来完成： 播放器/游戏：H5代替Flash，如Web Audio、Web Video、Canvas日常办公软件（复杂应用，并且慢慢从桌面程序演化为Web）：Office、Email、文档管理、产品设计、项目管理、代码编辑器大数据/AI配套软件（复杂应用，并且慢慢从桌面程序演化为Web）：需要大量的后台系统来做数据分析/机器学习容器/小程序：支付宝/微信/钉钉容器，各种行业功能小程序（拥有大量原生APP功能的APP成为互联网新趋势）产品信息展示类网站（炫酷应用）：各种智能设备官网、大企业官网 开发环境编译器每种方向使用的编译器都不一致，选择好的编译器就选择了好的起步，在这里推荐VS code编译器，快捷健十分广泛，打码十分方便。同时代码风格要注重，杂乱无章的代码要整理简洁、舒适 好看。 VS code的使用 代码托管每一次更改代码都可能会导致代码增删除改的错误出现，代码托管可以防止出现这种错误。在这里推荐使用git码云的代码托管。当然还可以适当了解github、SVN等托管方式（原理一致）。多人开发的话也可以使用码云。以下为廖雪峰的git教程。 git学习 小A前端学习路线首先，无论学任何一个技术，都是从零基础开始的，前端开发也是一样。做软件开发，是从事编程开发工作，必须先从语法基础开始学习，通过语法组成产品效果。 前端开发的基础语法，由HTML+CSS+JavaScript组成，这是前端开发最基本的3个语言。 HTML+CSS+JS基础 HTML+CSS HTML进阶、CSS进阶、div+css布局、HTML+css整站开发。 JavaScript基础 理解面向对象编程、Js基础教程、js内置对象常用方法、常见DOM树操作大全、ECMAscript、DOM、BOM、定时器和焦点图。 JQuery：基础使用 悬着器、DOM操作、特效和动画、方法链、拖拽、变形、JQueryUI组件基本使用。 HTML+CSS+JS进阶 JS高级特征 正则表达式、排序算法、递归算法、闭包、函数节流、作用域链、基于距离运动框架、面向对象基础。 HTML5： HTML5新语义标签、HTML5表单、音频和视频、离线和本地存储 CSS3： CSS3新选择器、伪元素、脸色表示法、边框、阴影、background系列属性改变、Transition、动画、景深和深透、3D效果制作、元素进场、出场策略、炫酷CSS3网页制作。 HTTP服务和AJAX编程 AJAX上篇： Ajax简介和异步的概念、Ajax框架的封装、XMLHttpRequest对象详细介绍方法、兼容性处理方法、Ajax框架的封装、Ajax中缓存问题、XML介绍和使用 AJAX下篇： JSON和JSON解析、数据绑定和模板技术、JSONP、跨域技术、图片预读取和lazy-load技术、jQuery框架中的AjaxAPI。 学习资料推荐 W3school 菜鸟教程 《Head FirstHTML与CSS（第二版）》 《css权威指南》 《css世界》 《dom编程艺术》 《Javascript高级程序设计》 《锋利的jQuery》 《Javascript权威指南》 廖雪峰JS：https://www.liaoxuefeng.com/wiki/1022910821149312/1023020745357888 视频资料网易云课堂： web前端开发JavaScript精英课js： https://study.163.com/course/introduction.htm?courseId=1004170004&amp;_trace_c_p_k2_=94371ee5856048719b8508f46f1c9842 tips无论是学习前端还是学习其他的知识，一定要注意实践、实践、实践！知识可以先从官方文档获取，解决方法也可以上csdn、简书、博客园上搜索别人的解决的坑，但是不实践，不做项目就一定不会进步并且学习到不同的知识。 在此建议小盆友们可以写写csdn博客，总结每一个项目收获的东西知识。每一次学习的总结都会是一次豁然开朗的体会。","categories":[],"tags":[]},{"title":"git的使用","slug":"git的使用","date":"2020-03-21T09:17:59.000Z","updated":"2020-03-26T03:38:30.103Z","comments":true,"path":"2020/03/21/git的使用/","link":"","permalink":"http://yoursite.com/2020/03/21/git%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"git：分布式版本控制系统安装： 1sudo apt-get install git 创建版本库 先创建一个文件夹 git init 初始化一个git仓库 Git add 添加文件 Git commit -m ‘说明’ 提交到仓库 Git status 检查仓库变动的状态 git diff readme.txt 检查某个文件具体修改了哪些内容 Git log 查看提交日志 Git reset –hard HEAD^ 退回上一个版本，HEAD表示当前版本，^表示上一个版本，^^表示上上个版本 跳回旧版本后想再跳回新的版本，需要在记录中找到版本的id号，Git reflog git checkout – readme.txt 把readme.txt文件在工作区的修改全部撤销,变得跟仓库的一样 git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。 git rm test.txt 删除文件 链接到github 先开启ssh服务，再将公钥添加到github中。 建立一个新的仓库，按照提示将本地仓库同步上去123456git remote add origin https:&#x2F;&#x2F;github.com&#x2F;100824&#x2F;git_test.gitgit push -u origin master# 以后可以用下面命令简化同步git push origin master# 从远程库克隆git clone +远程库地址（github上面有） 到这里就同步成功了 分支管理1234567891011# 创建分支git branch dev# 切换分支git checkout dev 或 git switch dev# 查看当前分支git branch# 在分支修改后记得add 与commit# 将分支合并到当前分支上（master）git merge dev# 合并后就可以删除分支了git branch -d dev 解决冲突当两个分支都有新的提交的时候，就无法使用上面的快速合并 123456789# 尝试快速合并，失败,提示必须手动解决冲突后在提交git merge newbranch# 可以使用git status查看冲突的文件# 直接打开冲突的文件，里面会有提示分支不同的信息，修改后再提交add 和commit# 查看分支的合并情况git log --graph --pretty&#x3D;oneline --abbrev-commit# 或者直接git log# 尽量不要使用fast-forward合并，使用--no-ff可以见到合并前的分支情况git merge --no-ff -m &#39;no fast-forward fixed&#39; newbranch bug分支当你在工作区的任务进行到一半，出现bug时，可以通过创建bug分支来解决bug使用stash可以将当前的工作现场隐藏起来,再创建一个bug的分支 12345678910111213git stashgit statusgit branch debug-101git checkout debug-101# 修改提交后，再stash查看工作现场git stash list# 再用apply恢复，或者用pop恢复后同时把stash的内容删了git stash applygit stash pop# 多次stash的时候可以使用list查看，再指定要恢复的stashgit stash apply stash@&#123;0&#125;# 复制特定的提交到当前分支，不是整个分支 加的是特定的提交的编号git cherry-pick 4c8043","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"VScode上手教程","slug":"VScode上手教程","date":"2020-03-13T17:31:08.000Z","updated":"2020-03-21T19:20:22.502Z","comments":true,"path":"2020/03/14/VScode上手教程/","link":"","permalink":"http://yoursite.com/2020/03/14/VScode%E4%B8%8A%E6%89%8B%E6%95%99%E7%A8%8B/","excerpt":"","text":"vscode上手教程由于电脑太多个软件，pycharm，goland，sublime，还有对markdowm的支持不是很友好，所以决定上手传说中强大的vscode 下载直接从官网下载即可https://code.visualstudio.com 汉化为了方便熟悉软件，先使用了汉化版，直接在插件搜索chinese，点击install之后重启，就OK了 接入linux子系统打开后提示我可以安装一个插件，用于直接打开及编辑linux子系统的文件（非常方便），于是就按着提示下载了（remote-WLS）。试了一下，的确非常方便，可以直接打开linux的整个工作目录，而且也能直接运行命令行的命令。 搭建运行环境万能语言运行环境 （Code Runner），安装这个插件，然后打开某个.py文件，ctrl+shift+N即可运行，非常方便 搭建python环境第一次打开.py文件会提示你安装python的插件，按提示安装后就可以调试代码了（前提是电脑已经安装了python） 远程开发工具插件Remote Development，通过SSH(Secure Shell)的方式连接到远程服务器，开发很方便，先记着，以后会用到。 markdowm插件Markdown Preview Enhanced，预览的界面得到优化Markdown PDF 可以直接导出pdf leetcode插件直接搜索leetcode插件安装，可能需要另外安装node.js，然后输入登录的账号密码就可以在vscode上刷leetcode 快捷操作 F5 开启调试 ctrl+shift+ ` 打开终端 ctrl+shift+F 打开搜索 ctrl + delete 删除右边 home 跳到行头 end 跳到行尾 ctrl 单词切分 Ctrl + ← 删除整个单词 shift 加方向键 选取 ctrl+shift+ N 打开新的窗口 ctrl+shift+ W 关闭当前窗口 ctrl+ P 快速打开 ctrl+shift+ P 显示命令面板 ctrl+shift+ \\ 跳转到匹配括号 ALT+ ↑ ↓ 当前行上移下移 ctrl + C 复制行 ctrl + X 剪切行 ctrl + shift ↑ ↓ 向上向下复制当前行 ctrl + shift + K 删除行 ctrl + home 跳到文章开头 ctrl + end 跳到文章末 ctrl + G 跳转到。。行 ctrl + H 替换 ctrl + D 跳到下一个查找匹配 F12 跳转到定义 shift + F12 显示引用 ctrl + K 再加F12 将定义打开到侧边 ctrl + F4 关闭当前标签页 ctrl + - = 放大，缩小 ctrl + B 打开关闭侧边栏 F5 调试 继续F5 下一个断点 F11 下一步 shift + F5 停止调试","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"数据结构与算法02","slug":"数据结构与算法02","date":"2020-03-12T20:10:20.000Z","updated":"2020-03-12T20:10:20.203Z","comments":true,"path":"2020/03/13/数据结构与算法02/","link":"","permalink":"http://yoursite.com/2020/03/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9502/","excerpt":"","text":"七天算法训练营(题集)七天七道leetcode的题 day 1《remove-duplicates-from-sorted-array》 https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/ 题目：给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 解题思路：由于是有序数组，所以直接遍历一遍，比较相邻的数，如果相同就把后一个pop掉 12345678910111213class Solution(object): def removeDuplicates(self, nums): listlen &#x3D; len(nums) if listlen &#x3D;&#x3D; 0 or listlen &#x3D;&#x3D; 1: return listlen i &#x3D; 1 while i &lt; listlen: if nums[i] !&#x3D; nums[i-1]: i +&#x3D; 1 else: nums.pop(i) listlen -&#x3D; 1 return i day 2《rotate-array》 https://leetcode-cn.com/problems/rotate-array/ 题目：给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 解题思路：1.循环k次，每一次pop掉最后一个数，并insert到最前2.用切片方法，对数字拼接，同理第一种3.用旋转次数对数组长度取余，得到实际旋转的次数，再用切片方法一次完成旋转 12345class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: for i in range(k): tmp &#x3D; nums.pop(-1) nums.insert(0,tmp) 123456class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: for i in range(k): tmp &#x3D; [1] tmp[0] &#x3D; nums.pop(-1) nums[:] &#x3D; tmp + nums 12345class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: k &#x3D; k % len(nums) tmp &#x3D; nums[-k:] nums[:] &#x3D; tmp + nums[:-k] day 3《merge-sorted-array》 https://leetcode-cn.com/problems/merge-sorted-array/ 题目：给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 num1 成为一个有序数组。 思路：循环m+n次，在将两个数组从头开始对比，若nums1大于nums2，nums1的下标后移一位，如果nums1小于或等于nums2，则将nums1的最后一位pop掉，再将nums2插入，同时下标后移一位 123456789101112131415161718192021222324class Solution(object): def merge(self, nums1, m, nums2, n): if len(nums2) &#x3D;&#x3D; 0: return nums1 tmp1 &#x3D; 0 tmp2 &#x3D; 0 for i in range(m+n): if m &#x3D;&#x3D; 0: while tmp2 &lt; n: nums1.pop() nums1.insert(i,nums2[tmp2]) tmp2 +&#x3D; 1 i +&#x3D; 1 return nums1 if nums1[tmp1] &lt;&#x3D; nums2[tmp2]: m -&#x3D; 1 else: nums1.pop() nums1.insert(i,nums2[tmp2]) tmp2 +&#x3D; 1 if tmp2 &#x3D;&#x3D; n: break tmp1 +&#x3D; 1 return nums1 day 4《merge-two-sorted-lists》 https://leetcode-cn.com/problems/merge-two-sorted-lists/ 题目：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 思路：两个链表从头比较，小的插入新的链表，同时下标后移，当其中一个链表遍历完时，再将另一个链表剩下的部分插入到新的链表后面，空间复杂度略有不足，可以直接创建一个链表头，然后将两个链表的节点一个一个接上。 12345678910111213141516171819202122232425262728class Solution(object): def mergeTwoLists(self, l1, l2): if l1 &#x3D;&#x3D; None: return l2 if l2 &#x3D;&#x3D; None: return l1 tmp1 &#x3D; l1 tmp2 &#x3D; l2 newhead &#x3D; ListNode(None) newhead.next &#x3D; None newlist &#x3D; newhead while tmp1 and tmp2: cur &#x3D; newlist if tmp1.val &lt;&#x3D; tmp2.val : newlist.val &#x3D; tmp1.val tmp1 &#x3D; tmp1.next else: newlist.val &#x3D; tmp2.val tmp2 &#x3D; tmp2.next tmp &#x3D; ListNode(None) tmp.next &#x3D; None newlist.next &#x3D; tmp newlist &#x3D; newlist.next if tmp1 &#x3D;&#x3D; None: cur.next &#x3D; tmp2 else: cur.next &#x3D; tmp1 return newhead 改进方法： 12345678910111213141516171819class Solution(object): def mergeTwoLists(self, l1, l2): prehead &#x3D; ListNode(-1) prev &#x3D; prehead while l1 and l2: if l1.val &lt;&#x3D; l2.val: prev.next &#x3D; l1 l1 &#x3D; l1.next else: prev.next &#x3D; l2 l2 &#x3D; l2.next prev &#x3D; prev.next # exactly one of l1 and l2 can be non-null at this point, so connect # the non-null list to the end of the merged list. prev.next &#x3D; l1 if l1 is not None else l2 return prehead.next day 5《two-sum》 https://leetcode-cn.com/problems/two-sum 题目：给定一个整数数组 nums和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 思路：1.暴力法，直接两次for循环遍历，找出相符条件的数。2.哈希，参考其他大神的方法，能显著提高时间复杂度。 暴力法： 12345678class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: lenth &#x3D; len(nums) for i in range(lenth): for j in range(i+1,lenth): if nums[i] &#x3D;&#x3D; target - nums[j]: return [i,j] return None 哈希： 123456789def twoSum(nums, target): hashmap&#x3D;&#123;&#125; for i,num in enumerate(nums): if hashmap.get(target - num) is not None: return [i,hashmap.get(target - num)] hashmap[num] &#x3D; i #这句不能放在if语句之前，解决list中有重复值或target-num&#x3D;num的情况作者：lao-la-rou-yue-jiao-yue-xiang链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;two-sum&#x2F;solution&#x2F;xiao-bai-pythonji-chong-jie-fa-by-lao-la-rou-yue-j&#x2F; 后面两道暂时不会，日后再补齐 day 6《design-circular-deque》 https://leetcode.com/problems/design-circular-deque 题目： 思路： 12 day 7《trapping-rain-water》 https://leetcode.com/problems/trapping-rain-water/ 题目： 思路：","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"python处理excel文件","slug":"python处理excel文件","date":"2020-03-03T17:25:16.000Z","updated":"2020-03-03T18:03:29.150Z","comments":true,"path":"2020/03/04/python处理excel文件/","link":"","permalink":"http://yoursite.com/2020/03/04/python%E5%A4%84%E7%90%86excel%E6%96%87%E4%BB%B6/","excerpt":"","text":"python处理excel文件起因：女朋友在手动处理excel文件，说她处理得好烦。我就看了一下需求，。发现可以用python来处理。需求：一个excel表格，只有一列的内容，每隔五行为一道选择题，需要把每道题都拎出来成为独立一行。放入到一个新的表格中。格式：输入表 A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 输出表 A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 代码： 12345678910111213141516171819202122#!coding:utf8import xlrd #读取模块import openpyxl #写入模块# 设置好输入和输出文件f1 &#x3D; xlrd.open_workbook(r&#39;C:\\Users\\53517\\Desktop\\人工智能导论题库 (100题).xlsx&#39;)sheet1 &#x3D; f1.sheet_by_index(1) #读取excel表格中的第一个表格num &#x3D; sheet1.col_values(1) #第一个表格中的第一列workbook &#x3D; openpyxl.Workbook() #临时存储对象sheet &#x3D; workbook.activesheet.title &#x3D; &#39;test&#39; #新生成表的名字long &#x3D; len(num) #总行数print(long)k &#x3D; 0for i in range(0, long&#x2F;5): for j in range(0, 5): sheet.cell(row&#x3D;i + 1, column&#x3D;j + 1, value&#x3D;str(num[k])) k +&#x3D; 1workbook.save(r&#39;C:\\Users\\53517\\Desktop\\output1.xlsx&#39;)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[]},{"title":"数据结构与算法01","slug":"数据结构与算法01","date":"2020-02-28T17:59:27.000Z","updated":"2020-02-28T18:36:26.147Z","comments":true,"path":"2020/02/29/数据结构与算法01/","link":"","permalink":"http://yoursite.com/2020/02/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9501/","excerpt":"","text":"数据结构与算法训练营1. 前言 可以练习，每道题起码过五遍 练习缺项，弱项的地方 不舒服，不爽，枯燥 把它变成你的舒适区 主动型反馈，看别人的代码 2. 切题四件套 理解清题意 把所有可能的想法过一遍 写代码 测试用例 3.刷题方法 第一遍，五分钟思考看题，看答案，分析优劣，并记忆 第二遍，自己写，对比执行时间与 第三遍，24小时后再重复练习 第四遍，一周后，再重复练习 第五遍，面试前再刷一遍 操作小技巧 fn + delete 删除右边 home 跳到行头 end 跳到行尾 ctrl 单词切分 Ctrl + delete 删除整个单词 shift 加方向键 选取 IDE的使用top tips 工欲善其事,必先利其器 刻意化练习","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-02-19T19:10:52.709Z","updated":"2020-02-19T19:10:52.703Z","comments":true,"path":"2020/02/20/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hi","slug":"hi","permalink":"http://yoursite.com/categories/hi/"}],"tags":[]},{"title":"肺炎疫情数据抓取","slug":"肺炎疫情数据抓取","date":"2020-02-19T18:12:48.000Z","updated":"2020-02-28T18:37:06.332Z","comments":true,"path":"2020/02/20/肺炎疫情数据抓取/","link":"","permalink":"http://yoursite.com/2020/02/20/%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/","excerpt":"","text":"","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[]}]}