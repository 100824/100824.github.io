{"meta":{"title":"丑丑与大头的博客","subtitle":"","description":"","author":100824,"url":"http://yoursite.com","root":"/"},"pages":[{"title":"所有标签","date":"2020-02-19T18:48:13.000Z","updated":"2020-02-19T19:05:41.162Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-02-19T19:20:26.891Z","updated":"2020-02-19T19:20:26.884Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"数据结构与算法02","slug":"数据结构与算法02","date":"2020-03-12T20:10:20.000Z","updated":"2020-03-12T20:10:20.203Z","comments":true,"path":"2020/03/13/数据结构与算法02/","link":"","permalink":"http://yoursite.com/2020/03/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9502/","excerpt":"","text":"七天算法训练营(题集)七天七道leetcode的题 day 1《remove-duplicates-from-sorted-array》 https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/ 题目：给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 解题思路：由于是有序数组，所以直接遍历一遍，比较相邻的数，如果相同就把后一个pop掉 12345678910111213class Solution(object): def removeDuplicates(self, nums): listlen &#x3D; len(nums) if listlen &#x3D;&#x3D; 0 or listlen &#x3D;&#x3D; 1: return listlen i &#x3D; 1 while i &lt; listlen: if nums[i] !&#x3D; nums[i-1]: i +&#x3D; 1 else: nums.pop(i) listlen -&#x3D; 1 return i day 2《rotate-array》 https://leetcode-cn.com/problems/rotate-array/ 题目：给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 解题思路：1.循环k次，每一次pop掉最后一个数，并insert到最前2.用切片方法，对数字拼接，同理第一种3.用旋转次数对数组长度取余，得到实际旋转的次数，再用切片方法一次完成旋转 12345class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: for i in range(k): tmp &#x3D; nums.pop(-1) nums.insert(0,tmp) 123456class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: for i in range(k): tmp &#x3D; [1] tmp[0] &#x3D; nums.pop(-1) nums[:] &#x3D; tmp + nums 12345class Solution: def rotate(self, nums: List[int], k: int) -&gt; None: k &#x3D; k % len(nums) tmp &#x3D; nums[-k:] nums[:] &#x3D; tmp + nums[:-k] day 3《merge-sorted-array》 https://leetcode-cn.com/problems/merge-sorted-array/ 题目：给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 num1 成为一个有序数组。 思路：循环m+n次，在将两个数组从头开始对比，若nums1大于nums2，nums1的下标后移一位，如果nums1小于或等于nums2，则将nums1的最后一位pop掉，再将nums2插入，同时下标后移一位 123456789101112131415161718192021222324class Solution(object): def merge(self, nums1, m, nums2, n): if len(nums2) &#x3D;&#x3D; 0: return nums1 tmp1 &#x3D; 0 tmp2 &#x3D; 0 for i in range(m+n): if m &#x3D;&#x3D; 0: while tmp2 &lt; n: nums1.pop() nums1.insert(i,nums2[tmp2]) tmp2 +&#x3D; 1 i +&#x3D; 1 return nums1 if nums1[tmp1] &lt;&#x3D; nums2[tmp2]: m -&#x3D; 1 else: nums1.pop() nums1.insert(i,nums2[tmp2]) tmp2 +&#x3D; 1 if tmp2 &#x3D;&#x3D; n: break tmp1 +&#x3D; 1 return nums1 day 4《merge-two-sorted-lists》 https://leetcode-cn.com/problems/merge-two-sorted-lists/ 题目：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 思路：两个链表从头比较，小的插入新的链表，同时下标后移，当其中一个链表遍历完时，再将另一个链表剩下的部分插入到新的链表后面，空间复杂度略有不足，可以直接创建一个链表头，然后将两个链表的节点一个一个接上。 12345678910111213141516171819202122232425262728class Solution(object): def mergeTwoLists(self, l1, l2): if l1 &#x3D;&#x3D; None: return l2 if l2 &#x3D;&#x3D; None: return l1 tmp1 &#x3D; l1 tmp2 &#x3D; l2 newhead &#x3D; ListNode(None) newhead.next &#x3D; None newlist &#x3D; newhead while tmp1 and tmp2: cur &#x3D; newlist if tmp1.val &lt;&#x3D; tmp2.val : newlist.val &#x3D; tmp1.val tmp1 &#x3D; tmp1.next else: newlist.val &#x3D; tmp2.val tmp2 &#x3D; tmp2.next tmp &#x3D; ListNode(None) tmp.next &#x3D; None newlist.next &#x3D; tmp newlist &#x3D; newlist.next if tmp1 &#x3D;&#x3D; None: cur.next &#x3D; tmp2 else: cur.next &#x3D; tmp1 return newhead 改进方法： 12345678910111213141516171819class Solution(object): def mergeTwoLists(self, l1, l2): prehead &#x3D; ListNode(-1) prev &#x3D; prehead while l1 and l2: if l1.val &lt;&#x3D; l2.val: prev.next &#x3D; l1 l1 &#x3D; l1.next else: prev.next &#x3D; l2 l2 &#x3D; l2.next prev &#x3D; prev.next # exactly one of l1 and l2 can be non-null at this point, so connect # the non-null list to the end of the merged list. prev.next &#x3D; l1 if l1 is not None else l2 return prehead.next day 5《two-sum》 https://leetcode-cn.com/problems/two-sum 题目：给定一个整数数组 nums和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 思路：1.暴力法，直接两次for循环遍历，找出相符条件的数。2.哈希，参考其他大神的方法，能显著提高时间复杂度。 暴力法： 12345678class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: lenth &#x3D; len(nums) for i in range(lenth): for j in range(i+1,lenth): if nums[i] &#x3D;&#x3D; target - nums[j]: return [i,j] return None 哈希： 123456789def twoSum(nums, target): hashmap&#x3D;&#123;&#125; for i,num in enumerate(nums): if hashmap.get(target - num) is not None: return [i,hashmap.get(target - num)] hashmap[num] &#x3D; i #这句不能放在if语句之前，解决list中有重复值或target-num&#x3D;num的情况作者：lao-la-rou-yue-jiao-yue-xiang链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;two-sum&#x2F;solution&#x2F;xiao-bai-pythonji-chong-jie-fa-by-lao-la-rou-yue-j&#x2F; 后面两道暂时不会，日后再补齐 day 6《design-circular-deque》 https://leetcode.com/problems/design-circular-deque 题目： 思路： 12 day 7《trapping-rain-water》 https://leetcode.com/problems/trapping-rain-water/ 题目： 思路：","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"python处理excel文件","slug":"python处理excel文件","date":"2020-03-03T17:25:16.000Z","updated":"2020-03-03T18:03:29.150Z","comments":true,"path":"2020/03/04/python处理excel文件/","link":"","permalink":"http://yoursite.com/2020/03/04/python%E5%A4%84%E7%90%86excel%E6%96%87%E4%BB%B6/","excerpt":"","text":"python处理excel文件起因：女朋友在手动处理excel文件，说她处理得好烦。我就看了一下需求，。发现可以用python来处理。需求：一个excel表格，只有一列的内容，每隔五行为一道选择题，需要把每道题都拎出来成为独立一行。放入到一个新的表格中。格式：输入表 A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 输出表 A1 A2 A3 A4 A5 B1 B2 B3 B4 B5 代码： 12345678910111213141516171819202122#!coding:utf8import xlrd #读取模块import openpyxl #写入模块# 设置好输入和输出文件f1 &#x3D; xlrd.open_workbook(r&#39;C:\\Users\\53517\\Desktop\\人工智能导论题库 (100题).xlsx&#39;)sheet1 &#x3D; f1.sheet_by_index(1) #读取excel表格中的第一个表格num &#x3D; sheet1.col_values(1) #第一个表格中的第一列workbook &#x3D; openpyxl.Workbook() #临时存储对象sheet &#x3D; workbook.activesheet.title &#x3D; &#39;test&#39; #新生成表的名字long &#x3D; len(num) #总行数print(long)k &#x3D; 0for i in range(0, long&#x2F;5): for j in range(0, 5): sheet.cell(row&#x3D;i + 1, column&#x3D;j + 1, value&#x3D;str(num[k])) k +&#x3D; 1workbook.save(r&#39;C:\\Users\\53517\\Desktop\\output1.xlsx&#39;)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[]},{"title":"数据结构与算法01","slug":"数据结构与算法01","date":"2020-02-28T17:59:27.000Z","updated":"2020-02-28T18:36:26.147Z","comments":true,"path":"2020/02/29/数据结构与算法01/","link":"","permalink":"http://yoursite.com/2020/02/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9501/","excerpt":"","text":"数据结构与算法训练营1. 前言 可以练习，每道题起码过五遍 练习缺项，弱项的地方 不舒服，不爽，枯燥 把它变成你的舒适区 主动型反馈，看别人的代码 2. 切题四件套 理解清题意 把所有可能的想法过一遍 写代码 测试用例 3.刷题方法 第一遍，五分钟思考看题，看答案，分析优劣，并记忆 第二遍，自己写，对比执行时间与 第三遍，24小时后再重复练习 第四遍，一周后，再重复练习 第五遍，面试前再刷一遍 操作小技巧 fn + delete 删除右边 home 跳到行头 end 跳到行尾 ctrl 单词切分 Ctrl + delete 删除整个单词 shift 加方向键 选取 IDE的使用top tips 工欲善其事,必先利其器 刻意化练习","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-02-19T19:10:52.709Z","updated":"2020-02-19T19:10:52.703Z","comments":true,"path":"2020/02/20/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hi","slug":"hi","permalink":"http://yoursite.com/categories/hi/"}],"tags":[]},{"title":"肺炎疫情数据抓取","slug":"肺炎疫情数据抓取","date":"2020-02-19T18:12:48.000Z","updated":"2020-02-28T18:37:06.332Z","comments":true,"path":"2020/02/20/肺炎疫情数据抓取/","link":"","permalink":"http://yoursite.com/2020/02/20/%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/","excerpt":"","text":"","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[]}]}